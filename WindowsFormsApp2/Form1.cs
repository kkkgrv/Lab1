using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace WindowsFormsApp2
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();


            label5.Text = "Свойства и методы элементов управления";
            label7.Text = "Свойства и методы элементов управления";
            comboBox1.Items.Add("ComboBox");
            pictureBox1.Image = Image.FromFile("C:\\Users\\dns\\Pictures\\tree.jpg");
        }



        private void button1_Click(object sender, EventArgs e)
        {
            label5.Text = "СВОЙСТВА элемента Button \n" +
                    "Name - имя элемента, по которому можно обращаться в коде \n" +
                    "Text - Текст на кнопке \n" +
                    "Width - ширина \n" +
                    "Margin Возвращает или задает расстояние между элементами управления. \n" +
                    "TextAlign Возвращает или задает способ выравнивания текста на кнопке.\n" +
                    "МЕТОДЫ\n" +
                    "Focus() Устанавливает фокус ввода на элемент управления. \n" +
                    "Show() Отображает элемент управления. \n" +
                    "Equals(Object) Определяет, равен ли указанный объект текущему объекту.";
        }



        private void label1_Click(object sender, EventArgs e)
        {
            label5.Text = "СВОЙСТВА элемента управления Label\n" +
                "Элемент служит для отображения простого текста на форме, доступного только для чтения\n" +
                "Text   Задает отображаемые текст метки\n" +
                "BorderStyle    Определяет стиль границы элемента\n" +
                "Image      Задает изображение, которое будет отображаться в элементе\n" +
                "BackColor      Определяет цвет фона для элемента\n" +
                "МЕТОДЫ элемента\n" +
                "DrawImage(Graphics, Image, Rectangle, ContentAlignment)	Рисует объект Image в пределах указанных границ\n" +
                "СОБЫТИЯ элемента\n" +
                "Click	Происходит при щелчке элемента управления\n" +
                "Enter	Происходит при входе в элемент управления\n";
        }



        private void Form1_Load(object sender, EventArgs e)
        {

        }



        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            label5.Text = "СВОЙСТВА элемента ComboBox \n" +
                    "Name - имя элемента, по которому можно обращаться в коде \n" +
                    "Text Возвращает или задает текст, связанный с этим элементом управления." +
                    "Size Возвращает или задает высоту и ширину элемента управления. \n" +
                    "Items	 Возвращает объект, представляющий коллекцию элементов, содержащихся в данном поле со списком ComboBox. \n" +
                    "Font Возвращает или задает шрифт текста, отображаемого элементом управления. \n" +
                    "МЕТОДЫ\n" +
                    "Select() Активирует элемент управления. \n" +
                    "Show() Отображает элемент управления. \n" +
                    "OnMouseClick(MouseEventArgs) Вызывает событие MouseClick. \n" +
                    "FindForm()	Возвращает форму, в которой находится элемент управления. \n";
        }



        private void tabPage1_Click(object sender, EventArgs e)
        {
            label5.Text = "СВОЙСТВА И МЕТОДЫ элемента управления TabControl:\n" +
                "1. Name-имя элемента по которому можно обращаться в коде\n" +
                "2. Anchor-определяет грани контейнера, к которому привязан определённый элемент управления\n" +
                "3. Margin-определяет отступы между полями элементов\n" +
                "4. HotTrack-указывает, изменяется ли вид вкладок при наведении на них\n" +
                "5. TabPages-число страниц в TabControl\n" +
                "СОБЫТИЯ элемента управления TabControl:\n" +
                "1. Click-происходит при щелчке элемента управления\n" +
                "2. Selected-происходит после выбора вкладки\n" +
                "3. DrowItem-происходит при необходимости прорисовать элемент/область\n" +
                "4. StyleChanged-событие возникает когда в Control изменяют стиль окна\n" +
                "5. Deselceted-просиходит при отмене выбора вкладки в качестве главной\n";
        }



        private void label5_Click(object sender, EventArgs e)
        {
            label5.Text = "СВОЙСТВА элемента Label \n" +
                    "Name - имя элемента, по которому можно обращаться в коде \n" +
                    "Text Возвращает или задает текст, связанный с этим элементом управления." +
                    "Size Возвращает или задает высоту и ширину элемента управления. \n" +
                    "BorderStyle Возвращает или задает стиль границы для элемента управления. \n" +
                    "Font Возвращает или задает шрифт текста, отображаемого элементом управления. \n" +
                    "МЕТОДЫ\n" +
                    "Hide() Скрывает элемент управления от пользователя. \n" +
                    "Select() Активирует элемент управления. \n" +
                    "ToString()	Возвращает строку, которая представляет текущий объект Label. \n";
        }



        private void textBox1_TextChanged_1(object sender, EventArgs e)
        {
           
                label5.Text = "СВОЙСТВА элементы TextBox \n" +
                    "Name - имя элемента, по которому можно обращаться в коде \n" +
                    "Text Возвращает или задает текст, связанный с этим элементом управления." +
                    "Size Возвращает или задает высоту и ширину элемента управления. \n" +
                    "BorderStyle Возвращает или задает стиль границы для элемента управления. \n" +
                    "Font Возвращает или задает шрифт текста, отображаемого элементом управления. \n" +
                    "BackColor Возвращает или задает цвет фона элемента управления. \n" +
                    "МЕТОДЫ\n" +
                    "Clear() Удаляет весь текст из элемента управления 'Текстовое поле'. \n" +
                    "Copy()	Копирует текущий выбор из текстового поля в буфер обмена. \n" +
                    "Cut() Перемещает текущий выбор из текстового поля в буфер обмена. \n" +
                    "Paste() Заменяет текущее выделение в текстовом поле содержимым буфера обмена. \n";
         
        }



        
        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {
            label5.Text = "СВОЙСТВА И МЕТОДЫ элемента управления CheckBox:\n" +
                "1. Name-имя элемента по которому можно обращаться в коде\n" +
                "2. Text-текст на элементе\n" +
                "3. CheckState-определяет состояние компонента\n" +
                "4. ThreeState-определяет возможность CheckBox использовать 3 состояния вместо 2ух\n" +
                "5. AutoChack-вызывает автоматическое изменение состояния флажка при его выборе\n" +
                "СОБЫТИЯ элемента управления CheckBox:\n" +
                "1. Click-происходит при щелчке элемента управления\n" +
                "2. CheckedChanged-воникает при изменении свойств Check\n" +
                "3. Paint-происходит при перерисовки элемента\n" +
                "4. KeyPress-возникает, когда элемент находится в фокусе и пользоваетль нажимает и отпускает клавишу\n" +
                "5.CheckStateChanged-возникает при изменении свойства CheckState";
        }



        private void numericUpDown1_ValueChanged(object sender, EventArgs e)
        {
            if (numericUpDown1.Value > 0)
            {
                label7.Text = "СВОЙТСВА И МЕТОДЫ элемента управления NumericUpDown:\n" +
                    "1. Name-имя элемента по которому можно обращаться в коде\n" +
                    "2. Hexadecimal-указывает должно ли значение числового поля быть в шестнадцатиричном формате\n" +
                    "3. UpDownAlign-прижатие поля со стрелками по X\n" +
                    "4. Maximum-максимальное число\n" +
                    "5. Minimum-минимальное число\n" +
                    "СОБЯТИЯ элемента управления NumericUpDown:\n" +
                    "1. Click-происходит при щелчке элемента управления\n" +
                    "2. Scroll-возникает при перемещении ползунка полосы\n" +
                    "3. ValueChanged-происходит при изменении значения данного элемента\n" +
                    "4. KeyUp-возникает в момент отпускания клавиши\n" +
                    "5. Enter-происходит, когда элемент управления становится активным";
            }
            else { label7.Text = "Свойства и методы элементов управления"; }
        }
        


        private void groupBox1_Enter(object sender, EventArgs e)
        {
            label5.Text = "СВОЙСТВА элемента управления GroupBox\n" +
                "Элемент представляет собой специальный контейнер, который ограничен от остальной формы границей\n" +
                "Name-имя элемента по которому можно обращаться в коде\n" +
                "Text   Позволяет установить заголовок формы\n" +
                "AllowDrop  Задает значение,которое указывает, будет ли разрешено перетаскиваание элемента\n" +
                "BackColor  Определяет цве фона компонента\n" +
                "Align  Управляет расположением компонента на форме, а также внутри компонентов-контейнеров, таких как Panel, PageControl\n" +
                "МЕТОДЫ элемента GroupBox\n" +
                "BringToFront() Располагает компонент на передний план\n" +
                "DoDragDrop()   Позволяет начать операцию перетаскивания" +
                "СОБЫТИЯ элемента\n" +
                "OnClick    Если пользователь осуществил щелчок основной кнопкой мыши в области компонента\n" +
                "OnHScroll  Наступает при изменении положения ползунка горизонтальной полосы прокрутки\n" +
                "OnVScroll Наступает при изменении положения ползунка вертикальной полосы прокрутки";
        }



        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            label5.Text = "СВОЙСТВА элемента управления ListBox\n" +
                "Элемент ListBox представляет собой простой список\n" +
                "Name-имя элемента по которому можно обращаться в коде\n" +
                "AllowDrop  Указывает, может ли элемент управления принимать данные, пертаскиваемыев него пользователем\n" +
                "Items  Представляет собой колекцию, хранит набор всех элементов списка\n" +
                "SelectedIndex  Возвращает или устанавливает номер выделенного элемента списка\n" +
                "SelectedIndices    Возвращает или устанавливает коллекцию выделенных элементов в виде набора их индексов" +
                "МЕТОДЫ элемента ListBox\n" +
                "Add()  Позволяет добавить новый элемент в коллекцию/список/ например: listBox1.Items.Add()\n" +
                "Insert()   Вставка производится по определенному индексу списка\n" +
                "Remove()   Удаления элемента по его тексту\n" +
                "RemoveAt()  Удалить элемент по его индексу в списке\n" +
                "Clear()    Очистить сразу весь список\n" +
                "СОБЫТИЯ ListBox\n" +
                "SelectedIndexChanged   Возникает при изменении выделенного элемента";
        }



        private void pictureBox1_Click(object sender, EventArgs e)
        {
            label7.Text = "СВОЙСТВА элемента управления PictureBox\n" +
                "PictureBox предназначен для показа изображений, отображения файлов в формате bmp, jpg, gif\n" +
                "Image: устанавливает объект типа Image\n" +
                "ImageLocation: устанавливает путь к изображению на диске или в интернете\n" +
                "InitialImage: некоторое начальное изображение, которое будет отображаться во время загрузки главного изображения\n" +
                "ErrorImage: изображение, которое отображается, если основное изображение не удалось загрузить\n" +
                "SizeMode: определяет, каким образом располагается изображение в элементе\n";
        }



        private void dateTimePicker1_ValueChanged(object sender, EventArgs e)
        {
            label7.Text = "СВОЙСТВА элемента управления DateTimePicker\n" +
                "DateTimePicker представляет раскрывающийся по нажатию календарь, в котором можно выбрать дату\n" +
                "Format: определяет формат отображения даты в элементе управления\n" +
                "MinDate: минимальная дата, которую можно выбрать\n" +
                "MaxDate: наибольшая дата, которую можно выбрать\n" +
                "Value: определеяте текущее выбранное значение в DateTimePicker\n" +
                "Text: представляет тот текст, который отображается в элементе\n" +
                "СОБЫТИЯ\n" +
                "ValueChanged: происходит при выборе даты\n" +
                "МЕТОДЫ\n" +
                "Select()	Активирует элемент управления\n" +
                "";
        }



        private void radioButton1_CheckedChanged(object sender, EventArgs e)
        {
            label7.Text = "СВОЙСТВА элемента управления RadioButton\n" +
                "RadioButton или переключатель. Могут распологаться группами, включение одного переключателя\n" +
                "означает выключение всех остальных. Переключатели помещенные в разные контейнеры относятся\n" +
                "к разным группам\n" +
                "Checked: при значении true позволяет установить у переключателя включенное состояние\n" +
                "Text: содержит надпись, расположенную около переключателя\n" +
                "Alignment: определяет место расположения надписи\n" +
                "Color определяет цвет фона компонента\n" +
                "МЕТОДЫ\n" +
                "SetFocus устанавливает фокус на данный компонент\n";
        }



        private void progressBar1_Click(object sender, EventArgs e)
        {
            label7.Text = "СВОЙСТВА элемента управления ProgressBar\n" +
                "ProgressBar служит для того, чтобы дать пользователю информацию о ходе выполнения какой-либо задачи\n" +
                "Minimum: минимальное возможное значение\n" +
                "Maximum: максимальное возможное значение\n" +
                "Value: текущее значение элемента\n" +
                "Step: шаг, на который изменится значение Value при вызове метода PerformStep\n" +
                "МЕТОДЫ элемента\n" +
                "Equals(Object)     Определяет, равен ли указанный объект текущему объекту\n" +
                "PerformStep()	Увеличивает текущую позицию индикатора хода выполнения на значение свойства ";
        }



        private void maskedTextBox1_Enter(object sender, EventArgs e)
        {
            label7.Text = "СВОЙСТВА элемента управвления MaskedTextBox \n" +
                    "Элемент представляет собой обычное текстовое поле, но позволяет контролировать ввод пользователя," +
                    "проверять его на наличие ошибок\n"+
                    "Name - имя элемента, по которому можно обращаться в коде \n" +
                    "Text Возвращает или задает текст, связанный с этим элементом управления." +
                    "Size Возвращает или задает высоту и ширину элемента управления. \n" +
                    "BorderStyle Возвращает или задает стиль границы для элемента управления. \n" +
                    "Font Возвращает или задает шрифт текста, отображаемого элементом управления. \n" +
                    "BackColor Возвращает или задает цвет фона элемента управления. \n" +
                    "Mask Получает или задает маску ввода для использования во время выполнения. \n" +
                    "RejectInputOnFirstFailure Указывает, должен ли прекращаться анализ вводимых пользователем данных," +
                    "при обнаружениий первого недопустимого символа \n" +
                    "МЕТОДЫ элемента MaskedTextBox \n" +
                    "Clear() Удаляет весь текст из элемента управления 'Текстовое поле'. \n" +
                    "Copy()	Копирует текущий выбор из текстового поля в буфер обмена. \n" +
                    "Cut() Перемещает текущий выбор из текстового поля в буфер обмена. \n" +
                    "Paste() Заменяет текущее выделение в текстовом поле содержимым буфера обмена. \n" +
                    "СОБЫТИЯ элемента MaskedTextBox \n" +
                    "MaskChanged Происходит после изменения маски ввода \n" +
                    "MaskInputRejected Происходит, если ввеженны пользователем символ не соответствует формату маски\n";
        }


        private void panel1_Scroll(object sender, ScrollEventArgs e)
        {
            label7.Text = "СВОЙСТВА элемента управления Panel\n" +
                "Элемент Panel представляет панель, объединяет элементы в группы\n" +
                "BorderStyle    Указывает стиль граница элемента, чтобы он выделялся на фоне формы\n" +
                "BackColor  Позволяет менять цвет фона элемента, чтобы он визуально не сливался с формой\n" +
                "AutoScroll     Можно сделать прокручиваемую панель, если содержимое выходит на границы\n" +
                "Name - имя элемента, по которому можно обращаться в коде \n" +
                "МЕТОДЫ элемента Panel\n" +
                "Hide()     Скрывает элемент управления от пользователя\n" +
                "BringToFront() Располагает компонент на передний план\n" +
                "SendToBack()   Располагает элемент на заднем плане\n" +
                "СОБЫТИЯ элемента\n" +
                "Scroll     Происходит когда пользователь выполняет прокрутку\n";
        }



        private void мЕНЮToolStripMenuItem_Click(object sender, EventArgs e)
        {
            label5.Text = "СВОЙСТВА элемента управления MenuStrip\n" +
                "Dock: прикрепляет меню к одной из сторон формы\n" +
                "LayoutStyle: задает ориентацию панели меню на форме\n" +
                "Stretch: позволяет растянуть панель по всей длине контейнера\n" +
                "TextDirection: задает направление текста в пунктах меню\n" +
                "CheckOnClick: при значении true позволяет по клику отметить пункт меню\n" +
                "DisplayStyle: определяет, будет ли отображаться на элементе текст или изображение\n" +
                "Image: указывает на само изображение\n" +
                "CheckState возвращает состояние пункта меню - отмечен он или нет\n" +
                "МЕТОДЫ\n" +
                "Hide()	Скрывает элемент управления от пользователя\n" +
                "Select()	Активирует элемент управления\n" +
                "Show()	Отображает элемент управления\n" +
                "СОБЫТИЯ\n" +
                "Enter	Происходит при входе в элемент управления\n" +
                "Click	Происходит при щелчке элемента управления";
        }

        private void dataGridView1_Scroll(object sender, ScrollEventArgs e)
        {
            dataGridView1.Rows.Add("Ivanov I.I.", 25, "New York");
            label7.Text = "СВОЙСТВА элемента управления MenuStrip\n" +
                "Columns	позволяет создать столбцы в таблице\n" +
                "ColumnsCount   задает число отображаемых столбцов\n" +
                "Rows   позволяет задать строки в элементе\n" +
                "RowCount   задает число отображаемых строк\n" +
                "МЕТОДЫ\n" +
                "AutoResizeRows()	Корректирует высоту всех строк по содержимому всех их ячеек\n" +
                "СОБЫТИЯ\n" +
                "CellContentClick	Возникает при щелчке по содержимому ячейки\n" +
                "DataError	Происходит, когда данные в источнике не удается зафиксировать\n" +
                "Scroll	Происходит, когда пользователь прокручивает содержимое элемента";
        }

        private void button2_Click(object sender, EventArgs e)
        {
            Form2 newfrm = new Form2(this);
            newfrm.Show();
        }
    }
}
